# Hope UI 모든 기능 마스터 매뉴얼 (A to Z)

이 문서는 Hope UI 템플릿의 모든 주요 기능에 대해, 신입 개발자가 코드를 바로 복사해서 사용할 수 있도록 각 컴포NPM install 런트의 속성(Props)과 상세한 코드 예제를 포함한 최종 가이드입니다.

---

## PART 1: 기본 UI 컴포넌트

### 1. 카드 (Card) UI 사용하기

- **[핵심 요약]** 컨텐츠를 감싸는 가장 기본적인 UI 단위입니다. `div`에 `.card`, `.card-header`, `.card-body` 클래스를 조합하여 사용합니다. 이 프로젝트에서는 전역 컴포넌트 `<Card>`로도 등록되어 있을 수 있습니다.
- **[관련 파일]** `src/views/dashboards/IndexPage.vue` 등 대부분의 페이지.

- **[단계별 가이드]**
  - 가장 기본적인 카드 구조입니다. 아래 코드를 복사하여 `.card-body` 안에 내용을 채우세요.

  ```html
  <template>
    <div class="card">
      <div class="card-header d-flex justify-content-between">
        <div class="header-title">
          <h4 class="card-title">카드 제목</h4>
        </div>
      </div>
      <div class="card-body">
        <p>이곳에 카드 컨텐츠가 들어갑니다. 차트, 폼, 테이블 등 무엇이든 넣을 수 있습니다.</p>
      </div>
    </div>
  </template>
  ```

### 2. 아이콘 사용하기

- **[핵심 요약]** 프로젝트에 내장된 `<IconComponent>`를 사용합니다. `icon-name`으로 아이콘을 선택하고 `type`, `color`, `size`로 스타일을 지정합니다.
- **[관련 파일]**
  - **컴포넌트**: `src/components/icons/IconComponent.vue`
  - **아이콘 목록**: `src/assets/icons.json` (사용 가능한 `icon-name` 전체 목록)

- **[핵심 컴포넌트 상세]** `<IconComponent>`
  - `icon-name` (String, 필수): `icons.json`에 정의된 아이콘 이름.
  - `type` (String, 선택, 기본값: 'solid'): 아이콘 스타일. `'solid'`, `'outlined'`, `'dual-tone'`. 
  - `color` (String, 선택): 아이콘 색상. `'primary'`, `'success'`, `'warning'`, `'danger'` 등 부트스트랩 테마 색상.
  - `size` (String, 선택): 아이콘 크기. `'sm'`, `'md'`, `'lg'`. 

- **[단계별 가이드]**
  - `icons.json`에서 원하는 아이콘 이름을 찾은 뒤, 아래와 같이 조합하여 사용합니다.

  ```html
  <button class="btn btn-primary">
    <IconComponent icon-name="home" /> 홈
  </button>
  <button class="btn btn-outline-secondary">
    <IconComponent icon-name="user" type="outlined" color="primary" size="sm" /> 프로필
  </button>
  ```

### 3. 알림창 (팝업) 띄우기

- **[핵심 요약]** `vue-sweetalert2` 라이브러리가 전역으로 설치되어 있어, 모든 컴포넌트에서 `this.$swal` 또는 `inject('Swal')`로 즉시 사용 가능합니다.

- **[단계별 가이드]**
  - 스크립트의 함수 내에서 필요한 상황에 맞춰 아래 코드를 호출합니다.

  ```javascript
  // 1. 단순 확인 팝업
  this.$swal('성공', '요청이 성공적으로 처리되었습니다.', 'success');

  // 2. 삭제 확인 팝업 (가장 많이 사용되는 패턴)
  this.$swal({
    title: '정말 삭제하시겠습니까?',
    text: "삭제된 데이터는 복구할 수 없습니다.",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: '네, 삭제합니다.',
    cancelButtonText: '아니요'
  }).then((result) => {
    if (result.isConfirmed) {
      // 여기에 실제 삭제 로직을 처리하는 API 호출 등을 넣습니다.
      console.log('삭제 로직 실행!');
      this.$swal('삭제 완료!', '데이터가 성공적으로 삭제되었습니다.', 'success');
    }
  });
  ```

---

## PART 2: 데이터 시각화 & 관리

### 4. 차트 (그래프) 추가하기

- **[핵심 요약]** `vue3-apexcharts`의 `<apexchart>` 컴포넌트를 사용합니다. `options`로 모양을, `series`로 데이터를 전달합니다.
- **[관련 파일]** `src/views/widgets/WidgetChart.vue`, `src/views/dashboards/IndexPage.vue`
- **[핵심 컴포넌트 상세]** `<apexchart>`
  - `type` (String, 필수): 차트 종류. `'bar'`, `'line'`, `'pie'` 등.
  - `options` (Object, 필수): 차트의 모든 시각적/기능적 설정.
  - `series` (Array, 필수): 차트에 표시될 실제 데이터.

- **[단계별 가이드]**
  - 아래는 가장 일반적인 막대그래프 예시입니다. `chartOptions`와 `series`를 API 응답에 맞게 수정하여 사용하세요.

  ```html
  <template>
    <apexchart type="bar" height="350" :options="chartOptions" :series="series"></apexchart>
  </template>

  <script setup>
  import { ref } from 'vue';

  const chartOptions = ref({
    chart: { type: 'bar', toolbar: { show: false } },
    colors: ['#5A96E3', '#80B380'],
    xaxis: {
      categories: ['1월', '2월', '3월', '4월', '5월'],
    },
    yaxis: { title: { text: '단위: (억원)' } },
    // ... 더 많은 옵션은 ApexCharts.js 공식 문서 참고
  });

  const series = ref([{
    name: '2023년 매출',
    data: [120, 150, 130, 180, 160]
  }, {
    name: '2024년 매출',
    data: [130, 165, 140, 200, 180]
  }]);
  </script>
  ```

### 5. 데이터 테이블 추가하기

- **[핵심 요약]** jQuery 기반의 `Datatables.net`을 Vue로 감싼 `<data-table>` 컴포넌트를 사용합니다. `columns`로 테이블 헤더를, `data`로 실제 데이터 배열을 전달합니다.
- **[관련 파일]**
  - **컴포넌트**: `src/components/DataTable.vue`
  - **참고 페이지**: `src/views/tables/DataTable.vue`

- **[핵심 컴포넌트 상세]** `<data-table>`
  - `columns` (Array, 필수): 테이블의 컬럼(헤더) 정보. `[{ title: '이름' }, { title: '직책' }]` 형태의 객체 배열.
  - `data` (Array, 필수): 테이블에 표시될 실제 데이터. 2차원 배열 `[['홍길동', '개발자'], ['김영희', '디자이너']]` 형태.

- **[단계별 가이드]**
  - API를 통해 받은 데이터를 아래 `tableData`와 `tableColumns` 형식에 맞게 가공한 뒤, 템플릿에 전달하세요.

  ```html
  <template>
    <div class="table-responsive">
      <data-table :columns="tableColumns" :data="tableData" />
    </div>
  </template>

  <script setup>
  import { ref } from 'vue';
  import DataTable from '@/components/DataTable.vue';

  // 테이블 헤더 정의
  const tableColumns = ref([
    { title: '이름' },
    { title: '직책' },
    { title: '사무실' },
    { title: '나이' },
    { title: '입사일' },
    { title: '연봉' }
  ]);

  // 실제 데이터 (API 응답으로 대체)
  const tableData = ref([
    ['Airi Satou', 'Accountant', 'Tokyo', '33', '2008/11/28', '$162,700'],
    ['Angelica Ramos', 'CEO', 'London', '47', '2009/10/09', '$1,200,000'],
    ['Ashton Cox', 'Author', 'San Francisco', '66', '2009/01/12', '$86,000'],
    // ... more data
  ]);
  </script>
  ```

---

## PART 3: 입력 및 특수 기능

### 6. 폼 & 유효성 검사 만들기

- **[핵심 요약]** `@vuelidate/core`를 사용하여 실시간으로 입력값의 유효성을 검사합니다. `state`에 입력값을, `rules`에 검사 규칙을 정의하고 `useVuelidate`로 연결합니다.
- **[관련 파일]** `src/views/forms/ValidationPage.vue` (내부의 `CustomValidation.vue` 등 참조)

- **[단계별 가이드]**
  - 아래는 회원가입 폼의 아이디(이메일), 비밀번호에 대한 유효성 검사 예제입니다.

  ```html
  <template>
    <form @submit.prevent="submitForm">
      <div class="form-group">
        <label for="email">이메일</label>
        <input type="email" v-model="state.email" class="form-control" :class="{ 'is-invalid': v$.email.$error }">
        <div v-if="v$.email.$error" class="invalid-feedback">
          <span v-for="error in v$.email.$errors" :key="error.$uid">{{ error.$message }}</span>
        </div>
      </div>
      <div class="form-group">
        <label for="password">비밀번호</label>
        <input type="password" v-model="state.password.password" class="form-control" :class="{ 'is-invalid': v$.password.password.$error }">
        <div v-if="v$.password.password.$error" class="invalid-feedback">비밀번호는 6자 이상이어야 합니다.</div>
      </div>
      <button type="submit" class="btn btn-primary">가입하기</button>
    </form>
  </template>

  <script setup>
  import { reactive, computed } from 'vue';
  import useVuelidate from '@vuelidate/core';
  import { required, email, minLength } from '@vuelidate/validators';

  // 1. 폼 입력값을 담을 state 정의
  const state = reactive({
    email: '',
    password: {
      password: '',
      confirm: ''
    }
  });

  // 2. 유효성 검사 규칙 정의
  const rules = computed(() => ({
    email: { required, email, $message: '유효한 이메일 주소를 입력하세요.' },
    password: {
      password: { required, minLength: minLength(6) },
    }
  }));

  // 3. Vuelidate 객체 생성
  const v$ = useVuelidate(rules, state);

  // 4. 폼 제출 함수
  const submitForm = async () => {
    const isFormCorrect = await v$.value.$validate();
    if (!isFormCorrect) return; // 유효성 검사 실패시 중단

    // 유효성 검사 통과시 API 호출 등 로직 실행
    console.log('Form Submitted:', state);
  };
  </script>
  ```

### 7. 캘린더 (FullCalendar) 추가하기

- **[핵심 요약]** `@fullcalendar/vue3`를 감싼 `<full-calender>` 컴포넌트를 사용합니다. `events` 배열에 일정 정보를 객체로 담아 전달합니다.
- **[관련 파일]**
  - **컴포넌트**: `src/components/custom/calender/FullCalender.vue`
  - **참고 페이지**: `src/views/spacial-pages/CalenderPage.vue`

- **[핵심 컴포넌트 상세]** `<full-calender>`
  - `events` (Array, 필수): 캘린더에 표시할 일정 데이터 배열.

- **[단계별 가이드]**
  - API로 가져온 일정 데이터를 `calendarEvents`와 같은 형식으로 만든 후, 컴포넌트에 전달합니다.

  ```html
  <template>
    <full-calender :events="calendarEvents"></full-calender>
  </template>

  <script setup>
  import { ref } from 'vue';
  import FullCalender from '@/components/custom/calender/FullCalender.vue';
  import moment from 'moment'; // 날짜 계산을 위해 moment.js 사용

  const calendarEvents = ref([
    {
      title: '중요한 미팅',
      start: moment(new Date()).format('YYYY-MM-DD') + 'T10:30:00.000Z',
      end: moment(new Date()).format('YYYY-MM-DD') + 'T12:30:00.000Z',
      backgroundColor: 'rgba(58,87,232,0.2)', // 배경색
      textColor: 'rgba(58,87,232,1)', // 글자색
      borderColor: 'rgba(58,87,232,1)' // 테두리색
    },
    {
      title: '팀 전체 휴가',
      start: moment(new Date()).add(5, 'days').format('YYYY-MM-DD'),
      allDay: true, // 하루 종일 이벤트
      color: 'green' // 간단하게 색상 지정도 가능
    }
  ]);
  </script>
  ```

### 8. 벡터 지도 (Leaflet) 추가하기

- **[핵심 요약]** Leaflet.js를 감싼 `<lea-flet>` 컴포넌트를 사용합니다. 지도의 모든 설정(중심점, 줌 레벨, 마커 등)은 `src/assets/vector-map.js` 파일에서 관리합니다.
- **[관련 파일]**
  - **컴포넌트**: `src/components/custom/vector-map/LeaFlet.vue`
  - **설정 파일**: `src/assets/vector-map.js` (가장 중요)
  - **참고 페이지**: `src/views/maps/VectorPage.vue`

- **[단계별 가이드]**

  1.  **설정 파일 수정**
      - `src/assets/vector-map.js` 파일을 엽니다.
      - `data` 객체 안의 내용을 수정하여 지도를 변경합니다.

      ```javascript
      // src/assets/vector-map.js
      export const data = {
        // ... (기존 월드맵 설정)

        // ↓↓↓ 서울 시청을 중심으로 하는 예시 ↓↓↓
        map: {
          zoom: 15, // 줌 레벨
          center: [37.5665, 126.9780], // 지도 중심 [위도, 경도]
        },
        tileLayer: {
          // 지도 타일 이미지 URL (VWorld, OpenStreetMap 등)
          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        },
        markers: [
          // 마커 목록
          {
            ll: [37.5665, 126.9780], // 마커 위치 [위도, 경도]
            popup: '<b>서울 시청</b><br>여기에 팝업 내용을 넣습니다.' // 클릭시 나올 팝업
          },
          {
            ll: [37.5512, 126.9882], // 남산타워
            popup: '<b>N서울타워</b>'
          }
        ]
      }
      ```

  2.  **페이지에 컴포넌트 배치**
      - 지도를 표시하고 싶은 페이지에 아래 코드를 추가합니다.

      ```html
      <template>
        <lea-flet id="my-map" :options="mapOptions" />
      </template>

      <script setup>
      import { ref } from 'vue';
      import LeaFlet from '@/components/custom/vector-map/LeaFlet.vue';
      import { data } from '@/assets/vector-map.js'; // 설정 파일 import

      const mapOptions = ref(data);
      </script>
      ```

---

## PART 4: 페이지 개발 프로세스

### 9. 새로운 페이지 만들기 (A to Z)

- **[핵심 요약]** `View 생성` → `Router 등록` → `Sidebar 메뉴 추가` 3단계를 거칩니다.

- **[단계별 가이드]**

  1.  **View 생성**: `src/views/my-service/MyNewPage.vue` 파일을 생성하고 UI 컴포넌트를 조립하여 페이지를 구성합니다.
  2.  **Router 등록**: `src/router/index.js`의 `defaultChildRoutes` 함수 내 배열에 아래와 같이 새 페이지의 경로 정보를 추가합니다.
      ```javascript
      {
        path: '/my-new-service', // URL 주소
        name: 'default.my-new-service', // 고유 이름
        meta: { name: '나의 새 서비스' }, // 페이지 제목
        component: () => import('@/views/my-service/MyNewPage.vue')
      }
      ```
  3.  **Sidebar 메뉴 추가**: `src/components/partials/SidebarComponent.vue`를 열어, 메뉴 데이터 배열에 새 메뉴 객체를 추가합니다. `to.name`에 위에서 정의한 `name`을 정확히 기입해야 합니다.
      ```javascript
      // Sidebar의 메뉴 데이터 배열에 추가
      {
        title: '나의 새 서비스',
        icon: 'rocket', // 아이콘 이름
        to: { name: 'default.my-new-service' }
      }
      ```